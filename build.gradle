
buildscript {
    ext {
        springBootVersion = '2.4.2'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.2.12")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.29.0'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'info.solidsoft.pitest' version '1.5.2'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '6.0.2'
    id 'org.sonarqube' version '2.8'
    id 'org.springframework.boot' version '2.4.2'
    id 'au.com.dius.pact' version '4.1.0'
}

apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.divorce'
version = '1.0.0'

allprojects {
    sourceCompatibility = 11
    targetCompatibility = 11
}

bootJar {
    archiveFileName = 'nfdiv-case-maintenance-service.jar'
    manifest {
        attributes 'Implementation-Title': project.name,
            'Implementation-Version': project.version
    }
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://repo.spring.io/libs-milestone' }
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    contractTestImplementation.extendsFrom testImplementation
    contractTestRuntime.extendsFrom testRuntime
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/functionalTest/java')
        }
        resources {
            srcDir('src/functionalTest/resources')
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

def versions = [
    ccdStoreClient: '4.7.3',
    commonsIo: '2.6',
    commonsLang3: '3.11',
    commonsCollections: '4.4',
    divCommonLib: '2.0.0',
    feignHttpClient: '10.2.0',
    gradlePitest: '1.5.2',
    idamClient: '2.0.0',
    jackson: '2.11.4',
    junit: '4.13.1',
    lombok: '1.18.12',
    pitest: '1.5.2',
    reformPropertiesVolume: '0.1.0',
    reformsJavaLogging: '5.1.7',
    restAssured: '3.3.0',
    serenity: '2.2.12',
    serenityCucumber: '1.9.51',
    serviceTokenGenerator: '4.0.0',
    sonarPitest: '0.5',
    springCloud: '3.0.1',
    springfoxSwagger: '3.0.0',
    wiremockVersion: '2.27.2',
    pact_version: '4.1.7',
    httpComponents: '4.5.13'
]

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-aop')
    implementation('org.springframework.boot:spring-boot-starter-json')

    compileOnly("org.projectlombok:lombok:${versions.lombok}")

    testCompileOnly("org.projectlombok:lombok:${versions.lombok}")
    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    testAnnotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    functionalTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient
    implementation (group: 'com.fasterxml.jackson.core', name:'jackson-databind', version: versions.jackson)

    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'org.apache.commons', name: 'commons-lang3', version : versions.commonsLang3
    implementation group: 'org.apache.commons', name: 'commons-collections4', version : versions.commonsCollections
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: versions.reformPropertiesVolume
    implementation group: 'uk.gov.hmcts.reform', name: 'nfdiv-common-lib', version: versions.divCommonLib

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    implementation group: 'org.apache.httpcomponents', name: 'fluent-hc', version: versions.httpComponents

    implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: versions.idamClient
    implementation (group: 'uk.gov.hmcts.reform', name:'service-auth-provider-client', version: versions.serviceTokenGenerator)

    implementation (group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: versions.ccdStoreClient)

    implementation group: 'org.pitest', name: 'pitest', version: versions.pitest
    implementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    implementation group: 'org.codehaus.sonar-plugins', name:'sonar-pitest-plugin', version: versions.sonarPitest

    testImplementation group: 'com.github.tomakehurst', name:'wiremock', version: versions.wiremockVersion
    testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: versions.springCloud
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    //integration test
    functionalTestImplementation group: 'junit', name: 'junit', version: versions.junit
    functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    functionalTestImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    functionalTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    functionalTestImplementation (group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: versions.ccdStoreClient)
    functionalTestImplementation (group: 'uk.gov.hmcts.reform', name:'service-auth-provider-client', version: versions.serviceTokenGenerator)

    functionalTestImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.2'
    functionalTestImplementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient

    contractTestImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.2'
    contractTestImplementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient

    functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalTestImplementation(sourceSets.test.output)

    contractTestCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    contractTestCompile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: versions.httpComponents

    contractTestCompile group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestCompile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
    contractTestCompile group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestRuntime group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson

    contractTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
    contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    useJUnit {
        includeCategories 'uk.gov.hmcts.reform.divorce.casemaintenanceservice.category.SmokeTest'
    }
}

ext.getVaultSecret = { String secretName ->
    new ByteArrayOutputStream().withStream { os ->
        exec {
            commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'nfdiv-aat', '-o', 'tsv', '--query', 'value', '--name', secretName
            standardOutput = os
        }
        return os.toString().replace('\n', '')
    }
}


bootRun {
    doFirst() {
        if (System.getenv("IDAM_API_BASEURL") == null) {
            println("Loading secrets from vault")

            systemProperty 'IDAM_API_BASEURL', 'https://idam-api.aat.platform.hmcts.net'
            systemProperty 'IDAM_API_REDIRECT_URL', 'https://div-pfe-aat.service.core-compute-aat.internal/authenticated'
            systemProperty 'AUTH_PROVIDER_SERVICE_CLIENT_BASEURL', 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
            systemProperty 'CASE_DATA_STORE_BASEURL', 'http://ccd-data-store-api-aat.service.core-compute-aat.internal'

            systemProperty 'AUTH_PROVIDER_SERVICE_CLIENT_KEY', getVaultSecret('cms-service-key')
            systemProperty 'AUTH2_CLIENT_SECRET', getVaultSecret('idam-secret')
            systemProperty 'IDAM_CASEWORKER_USERNAME', getVaultSecret('idam-caseworker-username')
            systemProperty 'IDAM_CASEWORKER_PASSWORD', getVaultSecret('idam-caseworker-password')
        }
    }
}

task functional(type: Test, description: 'Runs the integration tests', group: 'Verification') {
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

task nightlyFunctional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    doFirst(){
        if (System.getenv("TEST_URL") == null) {
            println("Loading secrets from vault")

            systemProperty 'AUTH_PROVIDER_SERVICE_CLIENT_KEY', getVaultSecret('cms-service-key')
            systemProperty 'AUTH2_CLIENT_SECRET', getVaultSecret('idam-secret')
            // systemProperty 'IDAM_API_BASEURL', 'http://localhost:5000'
            // systemProperty 'CASE_DATA_STORE_BASEURL', 'http://localhost:4452'
        }


        printf ("Available processors:::::::::: " + Runtime.runtime.availableProcessors().intdiv(2).toString())
    }

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 10
    setTestClassesDirs(sourceSets.functionalTest.output.classesDirs)
    setClasspath(sourceSets.functionalTest.runtimeClasspath)

    finalizedBy aggregate
}

task contract(type: Test) {
    group = 'Delivery pipeline'
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include "uk/gov/hmcts/reform/divorce/casemaintenanceservice/client/**"
    systemProperty 'pact.rootDir', "pacts"
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.divorce.casemaintenanceservice.controller.*',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.controller.support.*',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.event.ccd.submission.*',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.event.config',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.management.monitoring.health.*',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.service.*',
                     'uk.gov.hmcts.reform.divorce.casemaintenanceservice.util.*']
    excludedClasses = [ ]
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}

dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.32'
    setConfigFile(new File(rootDir, 'checkstyle.xml'))
}

def sonarExclusions = [
    '**uk/gov/hmcts/reform/divorce/casemaintenanceservice/domain/**/*',
    '**uk/gov/hmcts/reform/divorce/casemaintenanceservice/**/model/**/*',
    '**uk/gov/hmcts/reform/divorce/casemaintenanceservice/**/config/**/*',
    '**uk/gov/hmcts/reform/divorce/casemaintenanceservice/CaseMaintenanceServiceApplication.java'
]

sonarqube {
    properties {
        property "sonar.projectKey", "NoFaultDivorceCaseMaintenanceService"
        property "sonar.projectName", "No Fault Divorce :: case-maintenance-service"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}

task runAndPublishConsumerPactTests(type: Test){
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
    publish {
        pactDirectory = 'pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
        version = project.pactVersion
    }
}
